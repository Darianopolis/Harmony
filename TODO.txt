Functionality
- Refactor output folder structures
  - Separate out dependencies, temp files, objects/bmis in subfolders
  - Move harmony state to centralized location?

- Remove "tasks" from early build steps
  - Create intermediate Source representation (post expansion, pre task distribution)
- Improve dependency scanning
  - Add basic preprocessor parsing
    - The following should be enough for most (sane) module declarations/imports
      - #if FOO
      - #if[n]def FOO
      - #define FOO VALUE
  - Handle strings (basic and multiline)
  - Evaluate full paths for include/imported headers
- Lazy compilation
  - Use headers from dependency scanning to detect changes in tracked included headers

- Add "source sets" to targets
  - private defines and includes are applied directly to source sets
- Separate target data source from target config
  - E.g. dependencies with multiple targets should be able to use same fetched git repo
- Improve CMake config support
  - add include and link properties that automatically track to generated cmake build folder

- Implement proper job system that limits the number of running jobs
- Clean up process execution
  - Use platform process creation instead of std::system
    - can avoid 8000 character limit for compile commands?
  - Synchronize process output when running mutliple processes at once
  - Avoid intermediate output files for certain commands (E.g. toolchain dependency scanning)

- Load backend configuration at runtime
  - LLVM tooling Paths (clang-cl, clang-deps-scan, clangd, lld)
  - Visual Studio install location
  - Compile flags (generic and backend specific)
- Expand argument parsing
  - Allow installation of targets globally
- Configuration in Lua

Code Maintenance

- Separate out C++ specific code from general utilities
  - Move core of Harmony to be target language agnostic

- Wrap JSON writing
