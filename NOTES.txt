Precompiled Headers + Modules

- Find all static/external preprocessor directives in all global module fragments and generate PCHs
- Preprocess files to change global module fragment contents dynamically?
- https://learn.microsoft.com/en-us/cpp/build/compare-inclusion-methods?view=msvc-170
- https://learn.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-170
- https://learn.microsoft.com/en-us/cpp/build/reference/yc-create-precompiled-header-file?view=msvc-170
- https://learn.microsoft.com/en-us/cpp/build/reference/yu-use-precompiled-header-file?view=msvc-170

LLVM Build

  Install [C++ ATL for build tools] component from Visual Studio Installer
  cmake -B build -G Ninja -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" -DCMAKE_BUILD_TYPE=Release ./llvm
  cmake --build build --config Release

JSON Library

- https://github.com/ibireme/yyjson

Job System

- https://blog.molecular-matters.com/2015/08/24/job-system-2-0-lock-free-work-stealing-part-1-basics/
- https://benhoffman.tech/cpp/general/2018/11/13/cpp-job-system.html

MSBuild Generation

- https://learn.microsoft.com/en-us/cpp/build/msbuild-visual-cpp?view=msvc-170
- https://learn.microsoft.com/en-us/cpp/build/reference/vcxproj-filters-files?view=msvc-170

Removing responsibility from toolchain backends

- Backends should generate compile commands instead of executing commands directly

Build Process

  Represent all build operations as tasks in a DAG

  Task types:
    Source Generation
    Compilation
    Linking
    Copy

  Cache as much information as possible to speed up project scanning

  Parse build configuration files
  Expand build configurations
    Generate source lists
  Compute dependency information
  Sort tasks
  Execute

Dependency tracking

  Scan all sources
  Find includes
  If include is "external" then
    only update if includes files related target is updated/rebuilt
  Else
    propogate updates from include

  To reuse vendor dependency parsing (instead of implementing full preprocessor):
    Generate outputs with preprocessor+import *only* for all tracked sources

File Structure

  .harmony/
    profiles/
      %profileName%/
        env
        profile.jsonc
      ...
    tmp/
      %temporaryBuildFiles%
    targets/
      %targetName%/
        out/
          %outputFiles%
          ...
      ...
